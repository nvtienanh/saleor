# Generated by Django 2.2.9 on 2020-01-14 14:29

import uuid

import django.db.models.deletion
from django.db import migrations, models


def get_or_create_hotel(apps):
    Hotel = apps.get_model("hotel", "Hotel")
    ShippingZone = apps.get_model("shipping", "ShippingZone")
    Site = apps.get_model("sites", "Site")

    hotels = Hotel.objects.annotate(
        zones_count=models.Count("shipping_zones")
    ).filter(zones_count=ShippingZone.objects.count())
    if hotels.first() is not None:
        return hotels.first()

    site_settings = Site.objects.get_current().settings
    address = getattr(site_settings, "company_address", None)
    if address is None:
        Address = apps.get_model("account", "Address")
        address = Address.objects.create()

    hotel = Hotel.objects.create(name="Default hotel", address=address)
    hotel.shipping_zones.add(*ShippingZone.objects.all())
    return hotel


def forward(apps, schema_editor):
    RoomVariant = apps.get_model("room", "RoomVariant")
    Stock = apps.get_model("hotel", "Stock")

    if not RoomVariant.objects.exists():
        return

    room_variants = RoomVariant.objects.all()
    hotel = get_or_create_hotel(apps)
    stocks = [
        Stock(
            room_variant=variant,
            hotel=hotel,
            quantity=variant.quantity,
            quantity_allocated=variant.quantity_allocated,
        )
        for variant in room_variants.iterator()
    ]
    Stock.objects.bulk_create(stocks)


def backward(apps, schema_editor):
    RoomVariant = apps.get_model("room", "RoomVariant")
    Stock = apps.get_model("hotel", "Stock")

    stocks = (
        Stock.objects.values("room_variant_id")
        .annotate(quantity_sum=models.Sum("quantity"))
        .annotate(quantity_allocated_sum=models.Sum("quantity_allocated"))
    )
    room_variants = RoomVariant.objects.all()
    for variant in room_variants.iterator():
        variant_dict = stocks.get(room_variant=variant)
        variant.quantity = variant_dict["quantity_sum"]
        variant.quantity_allocated = variant_dict["quantity_allocated_sum"]
        variant.save(update_fields=["quantity", "quantity_allocated"])

    Stock.objects.all().delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("account", "0037_auto_20191219_0944"),
        ("shipping", "0017_django_price_2"),
        ("room", "0110_auto_20191108_0340"),
        ("site", "0025_auto_20191024_0552"),
    ]

    operations = [
        migrations.CreateModel(
            name="Hotel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Hotel name"),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Legal company name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        default="",
                        max_length=254,
                        verbose_name="Email address",
                    ),
                ),
                (
                    "address",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="account.Address",
                    ),
                ),
                (
                    "shipping_zones",
                    models.ManyToManyField(blank=True, to="shipping.ShippingZone"),
                ),
            ],
            options={"ordering": ("-name",)},
        ),
        migrations.CreateModel(
            name="Stock",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=0)),
                ("quantity_allocated", models.PositiveIntegerField(default=0)),
                (
                    "room_variant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stock",
                        to="room.RoomVariant",
                    ),
                ),
                (
                    "hotel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="hotel.Hotel",
                    ),
                ),
            ],
            options={"unique_together": {("hotel", "room_variant")}},
        ),
        migrations.RunPython(forward, backward),
    ]
